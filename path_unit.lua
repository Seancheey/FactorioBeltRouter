---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 10/6/20 1:13 AM
---

local assertNotNull = require("__MiscLib__/assert_not_null")
--- @type Vector2D
local Vector2D = require("__MiscLib__/vector2d")
--- @type TransportLineType
local TransportLineType = require("transport_line_type")

--- @class LuaEntitySpec
--- @field name string
--- @field position Vector2D
--- @field direction defines.direction
--- @field type '"input"'|'"output"'|nil only used for underground belt entity, otherwise nil

--- Represent a minimum segment of a path, can be either:
--- single belt/single input underground belt/single output underground belt/pair of underground belts etc...
--- @class PathUnit
--- @field name string Prototype name for the path unit
--- @field direction defines.direction
--- @field position Vector2D Starting point position for the path unit
--- @field distance number Distance of the path unit, minimum 1
--- @field type '"input"'|'"output"'|nil only used for unpaired underground belt entity, otherwise nil
--- @type PathUnit
local PathUnit = {}

function PathUnit:new(o)
    assertNotNull(o.name, o.position, o.direction, o.distance)
    assert(type(o.direction) == "number")
    setmetatable(o, self)
    self.__index = self
    return o
end

--- @return LuaEntitySpec[]
function PathUnit:toEntitySpecs()
    local type = TransportLineType.getType(self.name)
    if type.groundType == TransportLineType.onGround then
        if self.distance == 1 then
            return {
                { name = self.name, direction = self.direction, position = self.position }
            }
        else
            -- although we basically don't include multiple onGround segments into one PathUnit, but I'll provide algorithm here
            local out = {}
            for dist = 0, self.distance - 1, 1 do
                out[#out + 1] = { name = self.name, direction = self.direction, position = self.position + Vector2D.fromDirection(self.direction):scale(dist) }
            end
            return out
        end
    else
        if type.lineType == TransportLineType.fluidLine then
            local out = {}
            out[1] = { name = self.name, direction = Vector2D.fromDirection(self.direction):reverse():toDirection(), position = self.position }
            if self.distance > 1 then
                out[2] = { name = self.name, direction = self.direction, position = self.position + Vector2D.fromDirection(self.direction):scale(self.distance - 1) }
            end
            return out
        else
            if self.distance == 1 then
                return {
                    { name = self.name, direction = self.distance, position = self.position, type = self.type }
                }
            else
                return {
                    { name = self.name, direction = self.direction, position = self.position, type = "input" },
                    { name = self.name, direction = self.direction, position = self.position + Vector2D.fromDirection(self.direction):scale(self.distance - 1), type = "output" }
                }
            end
        end
    end
end

return PathUnit