---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 10/6/20 1:13 AM
---

local assertNotNull = require("__MiscLib__/assert_not_null")
--- @type Vector2D
local Vector2D = require("__MiscLib__/vector2d")
--- @type TransportLineType
local TransportLineType = require("transport_line_type")
--- @type ArrayList
local ArrayList = require("__MiscLib__/array_list")

--- @class LuaEntitySpec
--- @field name string
--- @field position Vector2D
--- @field direction defines.direction
--- @field type '"input"'|'"output"'|nil only used for underground belt entity, otherwise nil

--- Represent a minimum segment of a path, can be either:
--- single belt/single input underground belt/single output underground belt/pair of underground belts etc...
--- @class PathUnit
--- @field name string Prototype name for the path unit
--- @field direction defines.direction
--- @field position Vector2D Starting point position for the path unit
--- @field distance number Distance of the path unit, minimum 1
--- @field type '"input"'|'"output"'|nil only used for unpaired underground belt entity, otherwise nil
--- @type PathUnit
local PathUnit = {}

--- @return defines.direction
local function reverseDirection(direction)
    return (direction + 4) % 8
end

--- @return defines.direction[]
local function frontLeftRightOf(direction)
    return { direction, (direction + 2) % 8, (direction + 6) % 8 }
end

--- @param entity LuaEntity
--- @return PathUnit
function PathUnit:fromLuaEntity(entity)
    local newUnit = PathUnit:new {
        name = entity.name,
        position = Vector2D.fromPosition(entity.position),
        direction = entity.direction or defines.direction.north,
        distance = 1
    }
    if TransportLineType.getType(entity.name).lineType == TransportLineType.fluidLine and TransportLineType.getType(entity.name).groundType == TransportLineType.underGround then
        newUnit.direction = reverseDirection(newUnit.direction)
    end
    return newUnit
end

--- @param o PathUnit
--- @return PathUnit
function PathUnit:new(o)
    assertNotNull(o.name, o.position, o.direction, o.distance)
    assert(type(o.direction) == "number")
    setmetatable(o, self)
    self.__index = self
    return o
end

--- @return LuaEntitySpec[]
function PathUnit:toEntitySpecs()
    local type = TransportLineType.getType(self.name)
    if type.groundType == TransportLineType.onGround then
        if self.distance == 1 then
            return {
                { name = self.name, direction = self.direction, position = self.position }
            }
        else
            -- although we basically don't include multiple onGround segments into one PathUnit, but I'll provide algorithm here
            local out = {}
            for dist = 0, self.distance - 1, 1 do
                out[#out + 1] = { name = self.name, direction = self.direction, position = self.position + Vector2D.fromDirection(self.direction):scale(dist) }
            end
            return out
        end
    else
        if type.lineType == TransportLineType.fluidLine then
            local out = {}
            out[1] = { name = self.name, direction = Vector2D.fromDirection(self.direction):reverse():toDirection(), position = self.position }
            if self.distance > 1 then
                out[2] = { name = self.name, direction = self.direction, position = self.position + Vector2D.fromDirection(self.direction):scale(self.distance - 1) }
            end
            return out
        else
            if self.distance == 1 then
                return {
                    { name = self.name, direction = self.distance, position = self.position, type = self.type }
                }
            else
                return {
                    { name = self.name, direction = self.direction, position = self.position, type = "input" },
                    { name = self.name, direction = self.direction, position = self.position + Vector2D.fromDirection(self.direction):scale(self.distance - 1), type = "output" }
                }
            end
        end
    end
end

--- @return PathUnit[]
function PathUnit:possibleNextPathUnits(allowUnderground)

end

--- @return PathUnit[]
function PathUnit:possiblePrevPathUnits(allowUnderground)
    local undergroundPrototype = TransportLineType.undergroundVersionOf(self.name)
    local onGroundPrototype = TransportLineType.onGroundVersionOf(self.name)
    local attribute = TransportLineType.getType(self.name)
    --- @type PathUnit[]|ArrayList
    local candidates = ArrayList.new()
    --- @type defines.direction[]
    local posDiffDirections
    if attribute.lineType == TransportLineType.itemLine then
        if attribute.beltType == TransportLineType.undergroundBelt or attribute.beltType == TransportLineType.splitterBelt then
            -- underground belt/splitter's input only allows one direction
            posDiffDirections = { reverseDirection(self.direction) }
        else
            -- normal belt would allow 3 legal directions
            posDiffDirections = frontLeftRightOf(reverseDirection(self.direction))
        end
    else
        if attribute.groundType == TransportLineType.underGround then
            -- underground pipe's input only allows one direction
            posDiffDirections = { reverseDirection(self.direction) }
        else
            -- normal pipe would allow 4 legal directions
            posDiffDirections = { defines.direction.north, defines.direction.east, defines.direction.south, defines.direction.west }
        end
    end
    for _, posDiffDirection in ipairs(posDiffDirections) do
        local posDiffVector = Vector2D.fromDirection(posDiffDirection)
        if allowUnderground then
            -- adds underground candidates
            for underground_distance = undergroundPrototype.max_underground_distance + 1, 3, -1 do
                candidates:add(PathUnit:new {
                    name = undergroundPrototype.name,
                    direction = reverseDirection(posDiffDirection),
                    position = posDiffVector:scale(underground_distance) + Vector2D.fromPosition(self.position),
                    distance = underground_distance
                })
            end
        end
        -- adds on ground candidate
        candidates:add(PathUnit:new {
            name = onGroundPrototype.name,
            direction = reverseDirection(posDiffDirection),
            position = posDiffVector + Vector2D.fromPosition(self.position),
            distance = 1
        })
    end
    return candidates
end

function PathUnit:__eq(other)
    return self.name == other.name and self.direction == other.direction and self.position == other.position and self.distance == other.distance and self.type == other.type
end

return PathUnit