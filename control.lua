---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 9/30/20 1:11 AM
---


--- @alias player_index number

--- @type Copier
local Copy = require("__MiscLib__/copy")
--- @type Logger
local logging = require("__MiscLib__/logging")
--- @type EntityRoutingAttribute
local EntityRoutingAttribute = require("__MiscLib__/path_find/entity_routing_attribute")
--- @type AsyncTaskManager
local AsyncTaskManager = require("__MiscLib__/async_task")

--- @type SelectionQueue
local SelectionQueue = require("selection_queue")
--- @type TransportLineConnector
local TransportLineConnector = require("transport_line_connector")
--- @type boolean
local releaseMode = require("release")

--- @type table<string, boolean> simple table for easy toggling debugging groups
local loggingCategories = {
    reward = false,
    placing = false,
    transportType = false
}

local taskManager = AsyncTaskManager:new()
taskManager:resolveTaskEveryNthTick(1)

local function setupLogging()
    for category, enable in pairs(loggingCategories) do
        logging.addCategory(category, releaseMode and false or enable)
    end
    if releaseMode then
        logging.disableCategory(logging.D)
        logging.disableCategory(logging.I)
        logging.disableCategory(logging.V)
    end
end

--- @type table<player_index, SelectionQueue>
local playerSelectedStartingPositions = {}

local function setStartingTransportLine(event)
    local player = game.players[event.player_index]
    local selectedEntity = player.selected
    if not selectedEntity then
        return
    end
    local entityName = selectedEntity.name
    if entityName == "entity-ghost" then
        entityName = selectedEntity.ghost_name
    end
    local transportLineType = EntityRoutingAttribute.from(entityName)
    if transportLineType then
        if playerSelectedStartingPositions[event.player_index] == nil then
            playerSelectedStartingPositions[event.player_index] = SelectionQueue:new(event.player_index)
        end
        if playerSelectedStartingPositions[event.player_index]:tryRemoveDuplicate(selectedEntity) then
            player.print { "info-message.remove-starting-point" }
        else
            playerSelectedStartingPositions[event.player_index]:push(selectedEntity)
            player.print { "info-message.push-entity" }
            logging.log("Add entity at position " .. serpent.line(selectedEntity.position))
        end
    end
end

--- @param config LineConnectConfig
local function setEndingTransportLine(event, config)
    local player = game.players[event.player_index]
    local selectedEntity = player.selected
    if not selectedEntity then
        return
    end
    local entityName = selectedEntity.name
    if entityName == "entity-ghost" then
        entityName = selectedEntity.ghost_name
    end
    if not EntityRoutingAttribute.from(entityName) then
        return
    end
    local startingEntity
    if playerSelectedStartingPositions[event.player_index] then
        startingEntity = playerSelectedStartingPositions[event.player_index]:pop()
    end
    if not startingEntity then
        player.print { "error-message.no-starting-point-selected" }
        return
    end
    if config.turningPunishment == nil then
        config.turningPunishment = settings.get_player_settings(player)["turning-punishment"].value
    end
    if config.preferGroundModeUndergroundPunishment == nil then
        config.preferGroundModeUndergroundPunishment = settings.get_player_settings(player)["prefer-ground-mode-underground-punishment"].value
    end
    logging.log("build line with config: " .. serpent.line(config))
    local surface = player.surface
    local function canPlace(position)
        return surface.can_place_entity { name = "transport-belt", position = position, build_check_type = defines.build_check_type.ghost_place }
    end
    local num = 1
    local function place(entity)
        entity = Copy.deep_copy(entity)
        entity.force = player.force
        if entity.name ~= "entity-ghost" and entity.name ~= "speech-bubble" then
            entity.inner_name = entity.name
            entity.name = "entity-ghost"
        end
        entity.player = player
        if not releaseMode then
            player.create_local_flying_text { text = tostring(num), position = entity.position, time_to_live = 100000, speed = 0.000001 }
            num = num + 1
        end
        surface.create_entity(entity)
    end
    local function getEntity(position)
        for _, entity in pairs(surface.find_entities({ { position.x, position.y }, { position.x, position.y } })) do
            -- don't want player/other vehicles to be included
            local real_name = (entity.name == "entity-ghost") and entity.ghost_name or entity.name
            if EntityRoutingAttribute.from(real_name) then
                return entity
            end
        end
    end
    local transportLineConstructor = TransportLineConnector.new(canPlace, place, getEntity, taskManager)
    transportLineConstructor:buildTransportLine(startingEntity, selectedEntity, taskManager, config, player)
end

--- helper function
--- @param config LineConnectConfig
local function buildTransportLineWithConfig(config)
    return function(event)
        setEndingTransportLine(event, config)
    end
end

local function tryRemoveSelectedStartingPoint(eventWithEntity)
    local player_index = eventWithEntity.player_index
    --- @type LuaEntity
    local entity = eventWithEntity.entity
    if playerSelectedStartingPositions[player_index] and EntityRoutingAttribute.from(entity.name) then
        playerSelectedStartingPositions[player_index]:tryRemoveDuplicate(entity)
    end
end

script.on_event("select-line-starting-point", setStartingTransportLine)
script.on_event("build-transport-line", buildTransportLineWithConfig { allowUnderground = true, preferOnGround = false })
script.on_event("build-transport-line-no-underground", buildTransportLineWithConfig { allowUnderground = false, preferOnGround = true })
script.on_event("build-transport-line-prefer-ground", buildTransportLineWithConfig { allowUnderground = true, preferOnGround = true })
script.on_event(defines.events.on_player_mined_entity, tryRemoveSelectedStartingPoint)
script.on_event(defines.events.on_marked_for_deconstruction, tryRemoveSelectedStartingPoint)
setupLogging()

if script.active_mods["gvv"] then
    require("__gvv__.gvv")()
end