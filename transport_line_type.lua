---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 10/3/20 11:59 PM
---

--- @type Logger
local logging = require("__MiscLib__/logging")

--- @class TransportLineType
--- @field lineType 'TransportLineType.itemLine'|'TransportLineType.fluidLine'
--- @field beltType nil|'TransportLineType.normalBelt'|'TransportLineType.splitterBelt'|'TransportLineType.undergroundBelt'
--- @field groundType 'TransportLineType.onGround'|'TransportLineType.underGround'
local TransportLineType = {}

TransportLineType.itemLine = "item"
TransportLineType.fluidLine = "fluid"

TransportLineType.normalBelt = "normal"
TransportLineType.splitterBelt = "splitter"
TransportLineType.undergroundBelt = "underground"

TransportLineType.onGround = "onGround"
TransportLineType.underGround = "underGround"

--- @class TransportLineGroup
--- @type TransportLineGroup
local TransportLineGroup = {}
TransportLineGroup.normalGroupDict = {}
TransportLineGroup.undergroundGroupDict = {}
TransportLineGroup.splitterGroupDict = {}
TransportLineGroup.loaded = false

function TransportLineGroup.add(normal, underground, splitter)
    assert(normal and underground)
    local group = {
        [TransportLineType.normalBelt] = game.entity_prototypes[normal],
        [TransportLineType.undergroundBelt] = game.entity_prototypes[underground],
        [TransportLineType.splitterBelt] = game.entity_prototypes[splitter],
    }
    TransportLineGroup.normalGroupDict[normal] = group
    TransportLineGroup.undergroundGroupDict[underground] = group
    if splitter then
        TransportLineGroup.splitterGroupDict[splitter] = group
    end
end

function TransportLineGroup.tryLoadAllGroups()
    if TransportLineGroup.loaded then
        return
    end
    TransportLineGroup.loaded = true
    TransportLineGroup.add("transport-belt", "underground-belt", "splitter")
    TransportLineGroup.add("fast-transport-belt", "fast-underground-belt", "fast-splitter")
    TransportLineGroup.add("express-transport-belt", "express-underground-belt", "express-splitter")
    TransportLineGroup.add("pipe", "pipe-to-ground")
end

function TransportLineGroup.getLineGroup(entity_name)
    for _, dict in ipairs { TransportLineGroup.normalGroupDict, TransportLineGroup.undergroundGroupDict, TransportLineGroup.splitterGroupDict } do
        if dict[entity_name] then
            return dict[entity_name]
        end
    end
    logging.log("failed to find line group of " .. entity_name)
    return nil
end

--- @param entity_name string
--- @return TransportLineType|nil
function TransportLineType.getType(entity_name)
    assert(entity_name)

    local prototype = game.entity_prototypes[entity_name]
    if not prototype then
        logging.log("prototype " .. entity_name .. " is not an entity prototype")
        return nil
    end
    --- @type TransportLineType
    local type = {}
    if prototype.fluid_capacity > 0 then
        type.lineType = TransportLineType.fluidLine
    elseif prototype.belt_speed ~= nil then
        type.lineType = TransportLineType.itemLine
    end
    if not type.lineType then
        logging.log("prototype " .. entity_name .. " is neither a belt nor a pipe")
        return nil
    end
    if type.lineType == TransportLineType.itemLine then
        if prototype.max_underground_distance ~= nil then
            type.beltType = TransportLineType.undergroundBelt
        elseif string.find(entity_name, "splitter") then
            type.beltType = TransportLineType.splitterBelt
        else
            type.beltType = TransportLineType.normalBelt
        end
    end
    type.groundType = prototype.max_underground_distance and TransportLineType.underGround or TransportLineType.onGround
    logging.log("type of " .. entity_name .. " is " .. serpent.line(type))
    return type
end

--- @return LuaEntityPrototype|nil
function TransportLineType.onGroundVersionOf(entity_name)
    TransportLineGroup.tryLoadAllGroups()
    local lineGroup = TransportLineGroup.getLineGroup(entity_name)
    if lineGroup then
        return lineGroup[TransportLineType.normalBelt]
    end
end

--- @return LuaEntityPrototype|nil
function TransportLineType.splitterVersionOf(entity_name)
    TransportLineGroup.tryLoadAllGroups()
    local lineGroup = TransportLineGroup.getLineGroup(entity_name)
    if lineGroup then
        return lineGroup[TransportLineType.splitterBelt]
    end
end

--- @return LuaEntityPrototype|nil
function TransportLineType.undergroundVersionOf(entity_name)
    TransportLineGroup.tryLoadAllGroups()
    local lineGroup = TransportLineGroup.getLineGroup(entity_name)
    if lineGroup then
        return lineGroup[TransportLineType.undergroundBelt]
    end
end

return TransportLineType