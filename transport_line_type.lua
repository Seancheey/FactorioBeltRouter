---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 10/3/20 11:59 PM
---

--- @type Logger
local logging = require("__MiscLib__/logging")

--- @class TransportLineType
--- @field lineType 'TransportLineType.itemLine'|'TransportLineType.fluidLine'
--- @field beltType nil|'TransportLineType.normalBelt'|'TransportLineType.splitterBelt'|'TransportLineType.undergroundBelt'
--- @field groundType 'TransportLineType.onGround'|'TransportLineType.underGround'
local TransportLineType = {}

TransportLineType.itemLine = "item"
TransportLineType.fluidLine = "fluid"

TransportLineType.normalBelt = "normal"
TransportLineType.splitterBelt = "splitter"
TransportLineType.undergroundBelt = "underground"

TransportLineType.onGround = "onGround"
TransportLineType.underGround = "underGround"

--- @param entity_name string
--- @return TransportLineType|nil
function TransportLineType.getType(entity_name)
    assert(entity_name)

    local prototype = game.entity_prototypes[entity_name]
    if not prototype then
        logging.log("prototype " .. entity_name .. " is not an entity prototype")
        return nil
    end
    --- @type TransportLineType
    local type = {}
    if prototype.fluid_capacity ~= nil then
        type.lineType = TransportLineType.fluidLine
    elseif prototype.belt_speed ~= nil then
        type.lineType = TransportLineType.itemLine
    end
    if not type.lineType then
        logging.log("prototype " .. entity_name .. " is neither a belt nor a pipe")
        return nil
    end
    if type.lineType == TransportLineType.itemLine then
        if prototype.max_underground_distance ~= nil then
            type.beltType = TransportLineType.undergroundBelt
        elseif string.find(entity_name, "splitter") then
            type.beltType = TransportLineType.splitterBelt
        else
            type.beltType = TransportLineType.normalBelt
        end
    end
    type.groundType = prototype.max_underground_distance and TransportLineType.underGround or TransportLineType.onGround
    logging.log("type of " .. entity_name .. " is " .. serpent.line(type))
    return type
end

return TransportLineType