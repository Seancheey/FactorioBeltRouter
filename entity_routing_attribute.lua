---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 10/3/20 11:59 PM
---

--- @type Logger
local logging = require("__MiscLib__/logging")

local function log(message)
    logging.log(message, "transportType")
end

--- @class EntityRoutingAttribute
--- @field lineType 'TransportLineType.itemLine'|'TransportLineType.fluidLine'
--- @field beltType nil|'TransportLineType.normalBelt'|'TransportLineType.splitterBelt'|'TransportLineType.undergroundBelt'
--- @field groundType 'TransportLineType.onGround'|'TransportLineType.underGround'

local EntityRoutingAttribute = {}
EntityRoutingAttribute.__index = EntityRoutingAttribute
EntityRoutingAttribute.itemLine = "item"
EntityRoutingAttribute.fluidLine = "fluid"

EntityRoutingAttribute.normalBelt = "normal"
EntityRoutingAttribute.splitterBelt = "splitter"
EntityRoutingAttribute.undergroundBelt = "underground"

EntityRoutingAttribute.onGround = "onGround"
EntityRoutingAttribute.underGround = "underGround"

--- @class TransportLineGroup
--- @type TransportLineGroup
local TransportLineGroup = {}
TransportLineGroup.normalGroupDict = {}
TransportLineGroup.undergroundGroupDict = {}
TransportLineGroup.splitterGroupDict = {}
TransportLineGroup.loaded = false

function TransportLineGroup.add(normal, underground, splitter)
    assert(normal and underground)
    local group = {
        [EntityRoutingAttribute.normalBelt] = game.entity_prototypes[normal],
        [EntityRoutingAttribute.undergroundBelt] = game.entity_prototypes[underground],
        [EntityRoutingAttribute.splitterBelt] = game.entity_prototypes[splitter],
    }
    TransportLineGroup.normalGroupDict[normal] = group
    TransportLineGroup.undergroundGroupDict[underground] = group
    if splitter then
        TransportLineGroup.splitterGroupDict[splitter] = group
    end
end

function TransportLineGroup.tryLoadAllGroups()
    if TransportLineGroup.loaded then
        return
    end
    TransportLineGroup.loaded = true
    TransportLineGroup.add("transport-belt", "underground-belt", "splitter")
    TransportLineGroup.add("fast-transport-belt", "fast-underground-belt", "fast-splitter")
    TransportLineGroup.add("express-transport-belt", "express-underground-belt", "express-splitter")
    TransportLineGroup.add("pipe", "pipe-to-ground")
end

--- Mod transport line mapping support. For mod belts, usually the function can automatically figure out the group.
--- @type table<string, string>
local specialTransportLineGroupMapping = {
    ["factory-input-pipe"] = "pipe",
    ["factory-output-pipe"] = "pipe"
}

--- @param entity_name string
function TransportLineGroup.getLineGroup(entity_name)
    if specialTransportLineGroupMapping[entity_name] then
        log("Mapped special item " .. entity_name .. "'s type to " .. specialTransportLineGroupMapping[entity_name])
        entity_name = specialTransportLineGroupMapping[entity_name]
    end
    for _, dict in ipairs { TransportLineGroup.normalGroupDict, TransportLineGroup.undergroundGroupDict, TransportLineGroup.splitterGroupDict } do
        if dict[entity_name] then
            return dict[entity_name]
        end
    end
    if EntityRoutingAttribute.from(entity_name).lineType == EntityRoutingAttribute.itemLine then
        local groupBeltSpeed = game.entity_prototypes[entity_name].belt_speed
        assert(groupBeltSpeed, " item line is supposed to have belt speed, but \"" .. entity_name .. "\" doesn't?")
        local beltVersion, undergroundVersion, splitterVersion
        for _, entityPrototype in pairs(game.entity_prototypes) do
            if entityPrototype.belt_speed == groupBeltSpeed then
                if entityPrototype.max_underground_distance then
                    undergroundVersion = entityPrototype
                    -- TODO: find a better way of classifying splitter
                elseif string.find(entityPrototype.name, "splitter") then
                    splitterVersion = entityPrototype
                else
                    beltVersion = entityPrototype
                end

                if undergroundVersion and splitterVersion and beltVersion then
                    break
                end
            end
        end
        log("Found mod belt group: " .. beltVersion.name .. ", " .. undergroundVersion.name .. ", " .. splitterVersion.name)
        TransportLineGroup.add(beltVersion.name, undergroundVersion.name, splitterVersion.name)
        return {
            [EntityRoutingAttribute.normalBelt] = beltVersion,
            [EntityRoutingAttribute.undergroundBelt] = undergroundVersion,
            [EntityRoutingAttribute.splitterBelt] = splitterVersion,
        }
    elseif EntityRoutingAttribute.from(entity_name).lineType == EntityRoutingAttribute.fluidLine then
        if EntityRoutingAttribute.from(entity_name).groundType == EntityRoutingAttribute.onGround then
            -- TODO should find a way of associate fluid pipe's group
            return {
                [EntityRoutingAttribute.normalBelt] = game.entity_prototypes[entity_name],
                [EntityRoutingAttribute.undergroundBelt] = game.entity_prototypes["pipe-to-ground"],
            }
        end
        -- By default, assume on ground is pipe, underground is pipe-to-ground
    end
    log("failed to find line group of " .. entity_name)
    return nil
end

--- @param entity_name string
--- @return EntityRoutingAttribute|nil
function EntityRoutingAttribute.from(entity_name)
    assert(entity_name)

    local prototype = game.entity_prototypes[entity_name]
    if not prototype then
        log("prototype " .. entity_name .. " is not an entity prototype")
        return nil
    end
    --- @type EntityRoutingAttribute
    local type = {}
    if prototype.fluid_capacity > 0 then
        type.lineType = EntityRoutingAttribute.fluidLine
    elseif prototype.belt_speed ~= nil then
        type.lineType = EntityRoutingAttribute.itemLine
    end
    if not type.lineType then
        log("prototype " .. entity_name .. " is neither a belt nor a pipe")
        return nil
    end
    if type.lineType == EntityRoutingAttribute.itemLine then
        if prototype.max_underground_distance ~= nil then
            type.beltType = EntityRoutingAttribute.undergroundBelt
        elseif string.find(entity_name, "splitter") then
            type.beltType = EntityRoutingAttribute.splitterBelt
        else
            type.beltType = EntityRoutingAttribute.normalBelt
        end
    end
    type.groundType = prototype.max_underground_distance and EntityRoutingAttribute.underGround or EntityRoutingAttribute.onGround
    setmetatable(type, EntityRoutingAttribute)
    log("type of " .. entity_name .. " is " .. serpent.line(type))
    return type
end

function EntityRoutingAttribute:nextPossibleDisplacements(direction)
end

function EntityRoutingAttribute:nextPossibleDirections(selfDirection, displacement)
end

function EntityRoutingAttribute:prevPossibleDisplacements(direction)
end

function EntityRoutingAttribute:prevPossibleDirections(selfDirection, displacement)
end

--- @return LuaEntityPrototype|nil
function EntityRoutingAttribute.onGroundVersionOf(entity_name)
    TransportLineGroup.tryLoadAllGroups()
    local lineGroup = TransportLineGroup.getLineGroup(entity_name)
    if lineGroup then
        return lineGroup[EntityRoutingAttribute.normalBelt]
    end
end

--- @return LuaEntityPrototype|nil
function EntityRoutingAttribute.splitterVersionOf(entity_name)
    TransportLineGroup.tryLoadAllGroups()
    local lineGroup = TransportLineGroup.getLineGroup(entity_name)
    if lineGroup then
        return lineGroup[EntityRoutingAttribute.splitterBelt]
    end
end

--- @return LuaEntityPrototype|nil
function EntityRoutingAttribute.undergroundVersionOf(entity_name)
    TransportLineGroup.tryLoadAllGroups()
    local lineGroup = TransportLineGroup.getLineGroup(entity_name)
    if lineGroup then
        return lineGroup[EntityRoutingAttribute.undergroundBelt]
    end
end

return EntityRoutingAttribute